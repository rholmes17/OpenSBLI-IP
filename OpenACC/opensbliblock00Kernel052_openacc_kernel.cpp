//
// auto-generated by ops.py
//

#define OPS_GPU

extern int xdim0_opensbliblock00Kernel052;
int xdim0_opensbliblock00Kernel052_h = -1;
extern int ydim0_opensbliblock00Kernel052;
int ydim0_opensbliblock00Kernel052_h = -1;
extern int xdim1_opensbliblock00Kernel052;
int xdim1_opensbliblock00Kernel052_h = -1;
extern int ydim1_opensbliblock00Kernel052;
int ydim1_opensbliblock00Kernel052_h = -1;
extern int xdim2_opensbliblock00Kernel052;
int xdim2_opensbliblock00Kernel052_h = -1;
extern int ydim2_opensbliblock00Kernel052;
int ydim2_opensbliblock00Kernel052_h = -1;
extern int xdim3_opensbliblock00Kernel052;
int xdim3_opensbliblock00Kernel052_h = -1;
extern int ydim3_opensbliblock00Kernel052;
int ydim3_opensbliblock00Kernel052_h = -1;
extern int xdim4_opensbliblock00Kernel052;
int xdim4_opensbliblock00Kernel052_h = -1;
extern int ydim4_opensbliblock00Kernel052;
int ydim4_opensbliblock00Kernel052_h = -1;
extern int xdim5_opensbliblock00Kernel052;
int xdim5_opensbliblock00Kernel052_h = -1;
extern int ydim5_opensbliblock00Kernel052;
int ydim5_opensbliblock00Kernel052_h = -1;
extern int xdim6_opensbliblock00Kernel052;
int xdim6_opensbliblock00Kernel052_h = -1;
extern int ydim6_opensbliblock00Kernel052;
int ydim6_opensbliblock00Kernel052_h = -1;
extern int xdim7_opensbliblock00Kernel052;
int xdim7_opensbliblock00Kernel052_h = -1;
extern int ydim7_opensbliblock00Kernel052;
int ydim7_opensbliblock00Kernel052_h = -1;
extern int xdim8_opensbliblock00Kernel052;
int xdim8_opensbliblock00Kernel052_h = -1;
extern int ydim8_opensbliblock00Kernel052;
int ydim8_opensbliblock00Kernel052_h = -1;
extern int xdim9_opensbliblock00Kernel052;
int xdim9_opensbliblock00Kernel052_h = -1;
extern int ydim9_opensbliblock00Kernel052;
int ydim9_opensbliblock00Kernel052_h = -1;
extern int xdim10_opensbliblock00Kernel052;
int xdim10_opensbliblock00Kernel052_h = -1;
extern int ydim10_opensbliblock00Kernel052;
int ydim10_opensbliblock00Kernel052_h = -1;
extern int xdim11_opensbliblock00Kernel052;
int xdim11_opensbliblock00Kernel052_h = -1;
extern int ydim11_opensbliblock00Kernel052;
int ydim11_opensbliblock00Kernel052_h = -1;
extern int xdim12_opensbliblock00Kernel052;
int xdim12_opensbliblock00Kernel052_h = -1;
extern int ydim12_opensbliblock00Kernel052;
int ydim12_opensbliblock00Kernel052_h = -1;
extern int xdim13_opensbliblock00Kernel052;
int xdim13_opensbliblock00Kernel052_h = -1;
extern int ydim13_opensbliblock00Kernel052;
int ydim13_opensbliblock00Kernel052_h = -1;
extern int xdim14_opensbliblock00Kernel052;
int xdim14_opensbliblock00Kernel052_h = -1;
extern int ydim14_opensbliblock00Kernel052;
int ydim14_opensbliblock00Kernel052_h = -1;
extern int xdim15_opensbliblock00Kernel052;
int xdim15_opensbliblock00Kernel052_h = -1;
extern int ydim15_opensbliblock00Kernel052;
int ydim15_opensbliblock00Kernel052_h = -1;
extern int xdim16_opensbliblock00Kernel052;
int xdim16_opensbliblock00Kernel052_h = -1;
extern int ydim16_opensbliblock00Kernel052;
int ydim16_opensbliblock00Kernel052_h = -1;
extern int xdim17_opensbliblock00Kernel052;
int xdim17_opensbliblock00Kernel052_h = -1;
extern int ydim17_opensbliblock00Kernel052;
int ydim17_opensbliblock00Kernel052_h = -1;
extern int xdim18_opensbliblock00Kernel052;
int xdim18_opensbliblock00Kernel052_h = -1;
extern int ydim18_opensbliblock00Kernel052;
int ydim18_opensbliblock00Kernel052_h = -1;
extern int xdim19_opensbliblock00Kernel052;
int xdim19_opensbliblock00Kernel052_h = -1;
extern int ydim19_opensbliblock00Kernel052;
int ydim19_opensbliblock00Kernel052_h = -1;
extern int xdim20_opensbliblock00Kernel052;
int xdim20_opensbliblock00Kernel052_h = -1;
extern int ydim20_opensbliblock00Kernel052;
int ydim20_opensbliblock00Kernel052_h = -1;
extern int xdim21_opensbliblock00Kernel052;
int xdim21_opensbliblock00Kernel052_h = -1;
extern int ydim21_opensbliblock00Kernel052;
int ydim21_opensbliblock00Kernel052_h = -1;
extern int xdim22_opensbliblock00Kernel052;
int xdim22_opensbliblock00Kernel052_h = -1;
extern int ydim22_opensbliblock00Kernel052;
int ydim22_opensbliblock00Kernel052_h = -1;
extern int xdim23_opensbliblock00Kernel052;
int xdim23_opensbliblock00Kernel052_h = -1;
extern int ydim23_opensbliblock00Kernel052;
int ydim23_opensbliblock00Kernel052_h = -1;
extern int xdim24_opensbliblock00Kernel052;
int xdim24_opensbliblock00Kernel052_h = -1;
extern int ydim24_opensbliblock00Kernel052;
int ydim24_opensbliblock00Kernel052_h = -1;
extern int xdim25_opensbliblock00Kernel052;
int xdim25_opensbliblock00Kernel052_h = -1;
extern int ydim25_opensbliblock00Kernel052;
int ydim25_opensbliblock00Kernel052_h = -1;
extern int xdim26_opensbliblock00Kernel052;
int xdim26_opensbliblock00Kernel052_h = -1;
extern int ydim26_opensbliblock00Kernel052;
int ydim26_opensbliblock00Kernel052_h = -1;
extern int xdim27_opensbliblock00Kernel052;
int xdim27_opensbliblock00Kernel052_h = -1;
extern int ydim27_opensbliblock00Kernel052;
int ydim27_opensbliblock00Kernel052_h = -1;
extern int xdim28_opensbliblock00Kernel052;
int xdim28_opensbliblock00Kernel052_h = -1;
extern int ydim28_opensbliblock00Kernel052;
int ydim28_opensbliblock00Kernel052_h = -1;
extern int xdim29_opensbliblock00Kernel052;
int xdim29_opensbliblock00Kernel052_h = -1;
extern int ydim29_opensbliblock00Kernel052;
int ydim29_opensbliblock00Kernel052_h = -1;
extern int xdim30_opensbliblock00Kernel052;
int xdim30_opensbliblock00Kernel052_h = -1;
extern int ydim30_opensbliblock00Kernel052;
int ydim30_opensbliblock00Kernel052_h = -1;
extern int xdim31_opensbliblock00Kernel052;
int xdim31_opensbliblock00Kernel052_h = -1;
extern int ydim31_opensbliblock00Kernel052;
int ydim31_opensbliblock00Kernel052_h = -1;
extern int xdim32_opensbliblock00Kernel052;
int xdim32_opensbliblock00Kernel052_h = -1;
extern int ydim32_opensbliblock00Kernel052;
int ydim32_opensbliblock00Kernel052_h = -1;
extern int xdim33_opensbliblock00Kernel052;
int xdim33_opensbliblock00Kernel052_h = -1;
extern int ydim33_opensbliblock00Kernel052;
int ydim33_opensbliblock00Kernel052_h = -1;
extern int xdim34_opensbliblock00Kernel052;
int xdim34_opensbliblock00Kernel052_h = -1;
extern int ydim34_opensbliblock00Kernel052;
int ydim34_opensbliblock00Kernel052_h = -1;
extern int xdim35_opensbliblock00Kernel052;
int xdim35_opensbliblock00Kernel052_h = -1;
extern int ydim35_opensbliblock00Kernel052;
int ydim35_opensbliblock00Kernel052_h = -1;
extern int xdim36_opensbliblock00Kernel052;
int xdim36_opensbliblock00Kernel052_h = -1;
extern int ydim36_opensbliblock00Kernel052;
int ydim36_opensbliblock00Kernel052_h = -1;
extern int xdim37_opensbliblock00Kernel052;
int xdim37_opensbliblock00Kernel052_h = -1;
extern int ydim37_opensbliblock00Kernel052;
int ydim37_opensbliblock00Kernel052_h = -1;
extern int xdim38_opensbliblock00Kernel052;
int xdim38_opensbliblock00Kernel052_h = -1;
extern int ydim38_opensbliblock00Kernel052;
int ydim38_opensbliblock00Kernel052_h = -1;
extern int xdim39_opensbliblock00Kernel052;
int xdim39_opensbliblock00Kernel052_h = -1;
extern int ydim39_opensbliblock00Kernel052;
int ydim39_opensbliblock00Kernel052_h = -1;
extern int xdim40_opensbliblock00Kernel052;
int xdim40_opensbliblock00Kernel052_h = -1;
extern int ydim40_opensbliblock00Kernel052;
int ydim40_opensbliblock00Kernel052_h = -1;
extern int xdim41_opensbliblock00Kernel052;
int xdim41_opensbliblock00Kernel052_h = -1;
extern int ydim41_opensbliblock00Kernel052;
int ydim41_opensbliblock00Kernel052_h = -1;
extern int xdim42_opensbliblock00Kernel052;
int xdim42_opensbliblock00Kernel052_h = -1;
extern int ydim42_opensbliblock00Kernel052;
int ydim42_opensbliblock00Kernel052_h = -1;
extern int xdim43_opensbliblock00Kernel052;
int xdim43_opensbliblock00Kernel052_h = -1;
extern int ydim43_opensbliblock00Kernel052;
int ydim43_opensbliblock00Kernel052_h = -1;
extern int xdim44_opensbliblock00Kernel052;
int xdim44_opensbliblock00Kernel052_h = -1;
extern int ydim44_opensbliblock00Kernel052;
int ydim44_opensbliblock00Kernel052_h = -1;
extern int xdim45_opensbliblock00Kernel052;
int xdim45_opensbliblock00Kernel052_h = -1;
extern int ydim45_opensbliblock00Kernel052;
int ydim45_opensbliblock00Kernel052_h = -1;
extern int xdim46_opensbliblock00Kernel052;
int xdim46_opensbliblock00Kernel052_h = -1;
extern int ydim46_opensbliblock00Kernel052;
int ydim46_opensbliblock00Kernel052_h = -1;
extern int xdim47_opensbliblock00Kernel052;
int xdim47_opensbliblock00Kernel052_h = -1;
extern int ydim47_opensbliblock00Kernel052;
int ydim47_opensbliblock00Kernel052_h = -1;
extern int xdim48_opensbliblock00Kernel052;
int xdim48_opensbliblock00Kernel052_h = -1;
extern int ydim48_opensbliblock00Kernel052;
int ydim48_opensbliblock00Kernel052_h = -1;
extern int xdim49_opensbliblock00Kernel052;
int xdim49_opensbliblock00Kernel052_h = -1;
extern int ydim49_opensbliblock00Kernel052;
int ydim49_opensbliblock00Kernel052_h = -1;
extern int xdim50_opensbliblock00Kernel052;
int xdim50_opensbliblock00Kernel052_h = -1;
extern int ydim50_opensbliblock00Kernel052;
int ydim50_opensbliblock00Kernel052_h = -1;
extern int xdim51_opensbliblock00Kernel052;
int xdim51_opensbliblock00Kernel052_h = -1;
extern int ydim51_opensbliblock00Kernel052;
int ydim51_opensbliblock00Kernel052_h = -1;

#ifdef __cplusplus
extern "C" {
#endif
void opensbliblock00Kernel052_c_wrapper(
  double *p_a0,
  double *p_a1,
  double *p_a2,
  double *p_a3,
  double *p_a4,
  double *p_a5,
  double *p_a6,
  double *p_a7,
  double *p_a8,
  double *p_a9,
  double *p_a10,
  double *p_a11,
  double *p_a12,
  double *p_a13,
  double *p_a14,
  double *p_a15,
  double *p_a16,
  double *p_a17,
  double *p_a18,
  double *p_a19,
  double *p_a20,
  double *p_a21,
  double *p_a22,
  double *p_a23,
  double *p_a24,
  double *p_a25,
  double *p_a26,
  double *p_a27,
  double *p_a28,
  double *p_a29,
  double *p_a30,
  double *p_a31,
  double *p_a32,
  double *p_a33,
  double *p_a34,
  double *p_a35,
  double *p_a36,
  double *p_a37,
  double *p_a38,
  double *p_a39,
  double *p_a40,
  double *p_a41,
  double *p_a42,
  double *p_a43,
  double *p_a44,
  double *p_a45,
  double *p_a46,
  double *p_a47,
  double *p_a48,
  double *p_a49,
  double *p_a50,
  double *p_a51,
  int x_size, int y_size, int z_size);

#ifdef __cplusplus
}
#endif

// host stub function
void ops_par_loop_opensbliblock00Kernel052(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11, ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15, ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19, ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23, ops_arg arg24, ops_arg arg25, ops_arg arg26, ops_arg arg27, ops_arg arg28, ops_arg arg29, ops_arg arg30, ops_arg arg31, ops_arg arg32, ops_arg arg33, ops_arg arg34, ops_arg arg35, ops_arg arg36, ops_arg arg37, ops_arg arg38, ops_arg arg39, ops_arg arg40, ops_arg arg41, ops_arg arg42, ops_arg arg43, ops_arg arg44, ops_arg arg45, ops_arg arg46, ops_arg arg47, ops_arg arg48, ops_arg arg49, ops_arg arg50, ops_arg arg51) {

  //Timing
  double t1,t2,c1,c2;
  ops_arg args[52] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51};


  #ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args,52,range,56)) return;
  #endif

  if (OPS_diags > 1) {
    ops_timing_realloc(56,"opensbliblock00Kernel052");
    OPS_kernels[56].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute localy allocated range for the sub-block

  int start[3];
  int end[3];
  #ifdef OPS_MPI
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  int arg_idx[3];
  int arg_idx_base[3];
  #ifdef OPS_MPI
  if (compute_ranges(args, 52,block, range, start, end, arg_idx) < 0) return;
  #else //OPS_MPI
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
    arg_idx[n] = start[n];
  }
  #endif
  for ( int n=0; n<3; n++ ){
    arg_idx_base[n] = arg_idx[n];
  }

  int dat0 = args[0].dat->elem_size;
  int dat1 = args[1].dat->elem_size;
  int dat2 = args[2].dat->elem_size;
  int dat3 = args[3].dat->elem_size;
  int dat4 = args[4].dat->elem_size;
  int dat5 = args[5].dat->elem_size;
  int dat6 = args[6].dat->elem_size;
  int dat7 = args[7].dat->elem_size;
  int dat8 = args[8].dat->elem_size;
  int dat9 = args[9].dat->elem_size;
  int dat10 = args[10].dat->elem_size;
  int dat11 = args[11].dat->elem_size;
  int dat12 = args[12].dat->elem_size;
  int dat13 = args[13].dat->elem_size;
  int dat14 = args[14].dat->elem_size;
  int dat15 = args[15].dat->elem_size;
  int dat16 = args[16].dat->elem_size;
  int dat17 = args[17].dat->elem_size;
  int dat18 = args[18].dat->elem_size;
  int dat19 = args[19].dat->elem_size;
  int dat20 = args[20].dat->elem_size;
  int dat21 = args[21].dat->elem_size;
  int dat22 = args[22].dat->elem_size;
  int dat23 = args[23].dat->elem_size;
  int dat24 = args[24].dat->elem_size;
  int dat25 = args[25].dat->elem_size;
  int dat26 = args[26].dat->elem_size;
  int dat27 = args[27].dat->elem_size;
  int dat28 = args[28].dat->elem_size;
  int dat29 = args[29].dat->elem_size;
  int dat30 = args[30].dat->elem_size;
  int dat31 = args[31].dat->elem_size;
  int dat32 = args[32].dat->elem_size;
  int dat33 = args[33].dat->elem_size;
  int dat34 = args[34].dat->elem_size;
  int dat35 = args[35].dat->elem_size;
  int dat36 = args[36].dat->elem_size;
  int dat37 = args[37].dat->elem_size;
  int dat38 = args[38].dat->elem_size;
  int dat39 = args[39].dat->elem_size;
  int dat40 = args[40].dat->elem_size;
  int dat41 = args[41].dat->elem_size;
  int dat42 = args[42].dat->elem_size;
  int dat43 = args[43].dat->elem_size;
  int dat44 = args[44].dat->elem_size;
  int dat45 = args[45].dat->elem_size;
  int dat46 = args[46].dat->elem_size;
  int dat47 = args[47].dat->elem_size;
  int dat48 = args[48].dat->elem_size;
  int dat49 = args[49].dat->elem_size;
  int dat50 = args[50].dat->elem_size;
  int dat51 = args[51].dat->elem_size;


  //set up initial pointers
  int base0 = args[0].dat->base_offset + (OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size) * start[0] * args[0].stencil->stride[0];
  base0 = base0 + (OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size) *
    args[0].dat->size[0] *
    start[1] * args[0].stencil->stride[1];
  base0 = base0 + (OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size) *
    args[0].dat->size[0] *
    args[0].dat->size[1] *
    start[2] * args[0].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a0 = (double *)((char *)args[0].data_d + base0);
  #else
  double *p_a0 = (double *)((char *)args[0].data + base0);
  #endif

  int base1 = args[1].dat->base_offset + (OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size) * start[0] * args[1].stencil->stride[0];
  base1 = base1 + (OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size) *
    args[1].dat->size[0] *
    start[1] * args[1].stencil->stride[1];
  base1 = base1 + (OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size) *
    args[1].dat->size[0] *
    args[1].dat->size[1] *
    start[2] * args[1].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a1 = (double *)((char *)args[1].data_d + base1);
  #else
  double *p_a1 = (double *)((char *)args[1].data + base1);
  #endif

  int base2 = args[2].dat->base_offset + (OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size) * start[0] * args[2].stencil->stride[0];
  base2 = base2 + (OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size) *
    args[2].dat->size[0] *
    start[1] * args[2].stencil->stride[1];
  base2 = base2 + (OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size) *
    args[2].dat->size[0] *
    args[2].dat->size[1] *
    start[2] * args[2].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a2 = (double *)((char *)args[2].data_d + base2);
  #else
  double *p_a2 = (double *)((char *)args[2].data + base2);
  #endif

  int base3 = args[3].dat->base_offset + (OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size) * start[0] * args[3].stencil->stride[0];
  base3 = base3 + (OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size) *
    args[3].dat->size[0] *
    start[1] * args[3].stencil->stride[1];
  base3 = base3 + (OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size) *
    args[3].dat->size[0] *
    args[3].dat->size[1] *
    start[2] * args[3].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a3 = (double *)((char *)args[3].data_d + base3);
  #else
  double *p_a3 = (double *)((char *)args[3].data + base3);
  #endif

  int base4 = args[4].dat->base_offset + (OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) * start[0] * args[4].stencil->stride[0];
  base4 = base4 + (OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) *
    args[4].dat->size[0] *
    start[1] * args[4].stencil->stride[1];
  base4 = base4 + (OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) *
    args[4].dat->size[0] *
    args[4].dat->size[1] *
    start[2] * args[4].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a4 = (double *)((char *)args[4].data_d + base4);
  #else
  double *p_a4 = (double *)((char *)args[4].data + base4);
  #endif

  int base5 = args[5].dat->base_offset + (OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size) * start[0] * args[5].stencil->stride[0];
  base5 = base5 + (OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size) *
    args[5].dat->size[0] *
    start[1] * args[5].stencil->stride[1];
  base5 = base5 + (OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size) *
    args[5].dat->size[0] *
    args[5].dat->size[1] *
    start[2] * args[5].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a5 = (double *)((char *)args[5].data_d + base5);
  #else
  double *p_a5 = (double *)((char *)args[5].data + base5);
  #endif

  int base6 = args[6].dat->base_offset + (OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size) * start[0] * args[6].stencil->stride[0];
  base6 = base6 + (OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size) *
    args[6].dat->size[0] *
    start[1] * args[6].stencil->stride[1];
  base6 = base6 + (OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size) *
    args[6].dat->size[0] *
    args[6].dat->size[1] *
    start[2] * args[6].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a6 = (double *)((char *)args[6].data_d + base6);
  #else
  double *p_a6 = (double *)((char *)args[6].data + base6);
  #endif

  int base7 = args[7].dat->base_offset + (OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size) * start[0] * args[7].stencil->stride[0];
  base7 = base7 + (OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size) *
    args[7].dat->size[0] *
    start[1] * args[7].stencil->stride[1];
  base7 = base7 + (OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size) *
    args[7].dat->size[0] *
    args[7].dat->size[1] *
    start[2] * args[7].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a7 = (double *)((char *)args[7].data_d + base7);
  #else
  double *p_a7 = (double *)((char *)args[7].data + base7);
  #endif

  int base8 = args[8].dat->base_offset + (OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size) * start[0] * args[8].stencil->stride[0];
  base8 = base8 + (OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size) *
    args[8].dat->size[0] *
    start[1] * args[8].stencil->stride[1];
  base8 = base8 + (OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size) *
    args[8].dat->size[0] *
    args[8].dat->size[1] *
    start[2] * args[8].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a8 = (double *)((char *)args[8].data_d + base8);
  #else
  double *p_a8 = (double *)((char *)args[8].data + base8);
  #endif

  int base9 = args[9].dat->base_offset + (OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size) * start[0] * args[9].stencil->stride[0];
  base9 = base9 + (OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size) *
    args[9].dat->size[0] *
    start[1] * args[9].stencil->stride[1];
  base9 = base9 + (OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size) *
    args[9].dat->size[0] *
    args[9].dat->size[1] *
    start[2] * args[9].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a9 = (double *)((char *)args[9].data_d + base9);
  #else
  double *p_a9 = (double *)((char *)args[9].data + base9);
  #endif

  int base10 = args[10].dat->base_offset + (OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size) * start[0] * args[10].stencil->stride[0];
  base10 = base10 + (OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size) *
    args[10].dat->size[0] *
    start[1] * args[10].stencil->stride[1];
  base10 = base10 + (OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size) *
    args[10].dat->size[0] *
    args[10].dat->size[1] *
    start[2] * args[10].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a10 = (double *)((char *)args[10].data_d + base10);
  #else
  double *p_a10 = (double *)((char *)args[10].data + base10);
  #endif

  int base11 = args[11].dat->base_offset + (OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size) * start[0] * args[11].stencil->stride[0];
  base11 = base11 + (OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size) *
    args[11].dat->size[0] *
    start[1] * args[11].stencil->stride[1];
  base11 = base11 + (OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size) *
    args[11].dat->size[0] *
    args[11].dat->size[1] *
    start[2] * args[11].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a11 = (double *)((char *)args[11].data_d + base11);
  #else
  double *p_a11 = (double *)((char *)args[11].data + base11);
  #endif

  int base12 = args[12].dat->base_offset + (OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size) * start[0] * args[12].stencil->stride[0];
  base12 = base12 + (OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size) *
    args[12].dat->size[0] *
    start[1] * args[12].stencil->stride[1];
  base12 = base12 + (OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size) *
    args[12].dat->size[0] *
    args[12].dat->size[1] *
    start[2] * args[12].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a12 = (double *)((char *)args[12].data_d + base12);
  #else
  double *p_a12 = (double *)((char *)args[12].data + base12);
  #endif

  int base13 = args[13].dat->base_offset + (OPS_soa ? args[13].dat->type_size : args[13].dat->elem_size) * start[0] * args[13].stencil->stride[0];
  base13 = base13 + (OPS_soa ? args[13].dat->type_size : args[13].dat->elem_size) *
    args[13].dat->size[0] *
    start[1] * args[13].stencil->stride[1];
  base13 = base13 + (OPS_soa ? args[13].dat->type_size : args[13].dat->elem_size) *
    args[13].dat->size[0] *
    args[13].dat->size[1] *
    start[2] * args[13].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a13 = (double *)((char *)args[13].data_d + base13);
  #else
  double *p_a13 = (double *)((char *)args[13].data + base13);
  #endif

  int base14 = args[14].dat->base_offset + (OPS_soa ? args[14].dat->type_size : args[14].dat->elem_size) * start[0] * args[14].stencil->stride[0];
  base14 = base14 + (OPS_soa ? args[14].dat->type_size : args[14].dat->elem_size) *
    args[14].dat->size[0] *
    start[1] * args[14].stencil->stride[1];
  base14 = base14 + (OPS_soa ? args[14].dat->type_size : args[14].dat->elem_size) *
    args[14].dat->size[0] *
    args[14].dat->size[1] *
    start[2] * args[14].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a14 = (double *)((char *)args[14].data_d + base14);
  #else
  double *p_a14 = (double *)((char *)args[14].data + base14);
  #endif

  int base15 = args[15].dat->base_offset + (OPS_soa ? args[15].dat->type_size : args[15].dat->elem_size) * start[0] * args[15].stencil->stride[0];
  base15 = base15 + (OPS_soa ? args[15].dat->type_size : args[15].dat->elem_size) *
    args[15].dat->size[0] *
    start[1] * args[15].stencil->stride[1];
  base15 = base15 + (OPS_soa ? args[15].dat->type_size : args[15].dat->elem_size) *
    args[15].dat->size[0] *
    args[15].dat->size[1] *
    start[2] * args[15].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a15 = (double *)((char *)args[15].data_d + base15);
  #else
  double *p_a15 = (double *)((char *)args[15].data + base15);
  #endif

  int base16 = args[16].dat->base_offset + (OPS_soa ? args[16].dat->type_size : args[16].dat->elem_size) * start[0] * args[16].stencil->stride[0];
  base16 = base16 + (OPS_soa ? args[16].dat->type_size : args[16].dat->elem_size) *
    args[16].dat->size[0] *
    start[1] * args[16].stencil->stride[1];
  base16 = base16 + (OPS_soa ? args[16].dat->type_size : args[16].dat->elem_size) *
    args[16].dat->size[0] *
    args[16].dat->size[1] *
    start[2] * args[16].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a16 = (double *)((char *)args[16].data_d + base16);
  #else
  double *p_a16 = (double *)((char *)args[16].data + base16);
  #endif

  int base17 = args[17].dat->base_offset + (OPS_soa ? args[17].dat->type_size : args[17].dat->elem_size) * start[0] * args[17].stencil->stride[0];
  base17 = base17 + (OPS_soa ? args[17].dat->type_size : args[17].dat->elem_size) *
    args[17].dat->size[0] *
    start[1] * args[17].stencil->stride[1];
  base17 = base17 + (OPS_soa ? args[17].dat->type_size : args[17].dat->elem_size) *
    args[17].dat->size[0] *
    args[17].dat->size[1] *
    start[2] * args[17].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a17 = (double *)((char *)args[17].data_d + base17);
  #else
  double *p_a17 = (double *)((char *)args[17].data + base17);
  #endif

  int base18 = args[18].dat->base_offset + (OPS_soa ? args[18].dat->type_size : args[18].dat->elem_size) * start[0] * args[18].stencil->stride[0];
  base18 = base18 + (OPS_soa ? args[18].dat->type_size : args[18].dat->elem_size) *
    args[18].dat->size[0] *
    start[1] * args[18].stencil->stride[1];
  base18 = base18 + (OPS_soa ? args[18].dat->type_size : args[18].dat->elem_size) *
    args[18].dat->size[0] *
    args[18].dat->size[1] *
    start[2] * args[18].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a18 = (double *)((char *)args[18].data_d + base18);
  #else
  double *p_a18 = (double *)((char *)args[18].data + base18);
  #endif

  int base19 = args[19].dat->base_offset + (OPS_soa ? args[19].dat->type_size : args[19].dat->elem_size) * start[0] * args[19].stencil->stride[0];
  base19 = base19 + (OPS_soa ? args[19].dat->type_size : args[19].dat->elem_size) *
    args[19].dat->size[0] *
    start[1] * args[19].stencil->stride[1];
  base19 = base19 + (OPS_soa ? args[19].dat->type_size : args[19].dat->elem_size) *
    args[19].dat->size[0] *
    args[19].dat->size[1] *
    start[2] * args[19].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a19 = (double *)((char *)args[19].data_d + base19);
  #else
  double *p_a19 = (double *)((char *)args[19].data + base19);
  #endif

  int base20 = args[20].dat->base_offset + (OPS_soa ? args[20].dat->type_size : args[20].dat->elem_size) * start[0] * args[20].stencil->stride[0];
  base20 = base20 + (OPS_soa ? args[20].dat->type_size : args[20].dat->elem_size) *
    args[20].dat->size[0] *
    start[1] * args[20].stencil->stride[1];
  base20 = base20 + (OPS_soa ? args[20].dat->type_size : args[20].dat->elem_size) *
    args[20].dat->size[0] *
    args[20].dat->size[1] *
    start[2] * args[20].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a20 = (double *)((char *)args[20].data_d + base20);
  #else
  double *p_a20 = (double *)((char *)args[20].data + base20);
  #endif

  int base21 = args[21].dat->base_offset + (OPS_soa ? args[21].dat->type_size : args[21].dat->elem_size) * start[0] * args[21].stencil->stride[0];
  base21 = base21 + (OPS_soa ? args[21].dat->type_size : args[21].dat->elem_size) *
    args[21].dat->size[0] *
    start[1] * args[21].stencil->stride[1];
  base21 = base21 + (OPS_soa ? args[21].dat->type_size : args[21].dat->elem_size) *
    args[21].dat->size[0] *
    args[21].dat->size[1] *
    start[2] * args[21].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a21 = (double *)((char *)args[21].data_d + base21);
  #else
  double *p_a21 = (double *)((char *)args[21].data + base21);
  #endif

  int base22 = args[22].dat->base_offset + (OPS_soa ? args[22].dat->type_size : args[22].dat->elem_size) * start[0] * args[22].stencil->stride[0];
  base22 = base22 + (OPS_soa ? args[22].dat->type_size : args[22].dat->elem_size) *
    args[22].dat->size[0] *
    start[1] * args[22].stencil->stride[1];
  base22 = base22 + (OPS_soa ? args[22].dat->type_size : args[22].dat->elem_size) *
    args[22].dat->size[0] *
    args[22].dat->size[1] *
    start[2] * args[22].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a22 = (double *)((char *)args[22].data_d + base22);
  #else
  double *p_a22 = (double *)((char *)args[22].data + base22);
  #endif

  int base23 = args[23].dat->base_offset + (OPS_soa ? args[23].dat->type_size : args[23].dat->elem_size) * start[0] * args[23].stencil->stride[0];
  base23 = base23 + (OPS_soa ? args[23].dat->type_size : args[23].dat->elem_size) *
    args[23].dat->size[0] *
    start[1] * args[23].stencil->stride[1];
  base23 = base23 + (OPS_soa ? args[23].dat->type_size : args[23].dat->elem_size) *
    args[23].dat->size[0] *
    args[23].dat->size[1] *
    start[2] * args[23].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a23 = (double *)((char *)args[23].data_d + base23);
  #else
  double *p_a23 = (double *)((char *)args[23].data + base23);
  #endif

  int base24 = args[24].dat->base_offset + (OPS_soa ? args[24].dat->type_size : args[24].dat->elem_size) * start[0] * args[24].stencil->stride[0];
  base24 = base24 + (OPS_soa ? args[24].dat->type_size : args[24].dat->elem_size) *
    args[24].dat->size[0] *
    start[1] * args[24].stencil->stride[1];
  base24 = base24 + (OPS_soa ? args[24].dat->type_size : args[24].dat->elem_size) *
    args[24].dat->size[0] *
    args[24].dat->size[1] *
    start[2] * args[24].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a24 = (double *)((char *)args[24].data_d + base24);
  #else
  double *p_a24 = (double *)((char *)args[24].data + base24);
  #endif

  int base25 = args[25].dat->base_offset + (OPS_soa ? args[25].dat->type_size : args[25].dat->elem_size) * start[0] * args[25].stencil->stride[0];
  base25 = base25 + (OPS_soa ? args[25].dat->type_size : args[25].dat->elem_size) *
    args[25].dat->size[0] *
    start[1] * args[25].stencil->stride[1];
  base25 = base25 + (OPS_soa ? args[25].dat->type_size : args[25].dat->elem_size) *
    args[25].dat->size[0] *
    args[25].dat->size[1] *
    start[2] * args[25].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a25 = (double *)((char *)args[25].data_d + base25);
  #else
  double *p_a25 = (double *)((char *)args[25].data + base25);
  #endif

  int base26 = args[26].dat->base_offset + (OPS_soa ? args[26].dat->type_size : args[26].dat->elem_size) * start[0] * args[26].stencil->stride[0];
  base26 = base26 + (OPS_soa ? args[26].dat->type_size : args[26].dat->elem_size) *
    args[26].dat->size[0] *
    start[1] * args[26].stencil->stride[1];
  base26 = base26 + (OPS_soa ? args[26].dat->type_size : args[26].dat->elem_size) *
    args[26].dat->size[0] *
    args[26].dat->size[1] *
    start[2] * args[26].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a26 = (double *)((char *)args[26].data_d + base26);
  #else
  double *p_a26 = (double *)((char *)args[26].data + base26);
  #endif

  int base27 = args[27].dat->base_offset + (OPS_soa ? args[27].dat->type_size : args[27].dat->elem_size) * start[0] * args[27].stencil->stride[0];
  base27 = base27 + (OPS_soa ? args[27].dat->type_size : args[27].dat->elem_size) *
    args[27].dat->size[0] *
    start[1] * args[27].stencil->stride[1];
  base27 = base27 + (OPS_soa ? args[27].dat->type_size : args[27].dat->elem_size) *
    args[27].dat->size[0] *
    args[27].dat->size[1] *
    start[2] * args[27].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a27 = (double *)((char *)args[27].data_d + base27);
  #else
  double *p_a27 = (double *)((char *)args[27].data + base27);
  #endif

  int base28 = args[28].dat->base_offset + (OPS_soa ? args[28].dat->type_size : args[28].dat->elem_size) * start[0] * args[28].stencil->stride[0];
  base28 = base28 + (OPS_soa ? args[28].dat->type_size : args[28].dat->elem_size) *
    args[28].dat->size[0] *
    start[1] * args[28].stencil->stride[1];
  base28 = base28 + (OPS_soa ? args[28].dat->type_size : args[28].dat->elem_size) *
    args[28].dat->size[0] *
    args[28].dat->size[1] *
    start[2] * args[28].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a28 = (double *)((char *)args[28].data_d + base28);
  #else
  double *p_a28 = (double *)((char *)args[28].data + base28);
  #endif

  int base29 = args[29].dat->base_offset + (OPS_soa ? args[29].dat->type_size : args[29].dat->elem_size) * start[0] * args[29].stencil->stride[0];
  base29 = base29 + (OPS_soa ? args[29].dat->type_size : args[29].dat->elem_size) *
    args[29].dat->size[0] *
    start[1] * args[29].stencil->stride[1];
  base29 = base29 + (OPS_soa ? args[29].dat->type_size : args[29].dat->elem_size) *
    args[29].dat->size[0] *
    args[29].dat->size[1] *
    start[2] * args[29].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a29 = (double *)((char *)args[29].data_d + base29);
  #else
  double *p_a29 = (double *)((char *)args[29].data + base29);
  #endif

  int base30 = args[30].dat->base_offset + (OPS_soa ? args[30].dat->type_size : args[30].dat->elem_size) * start[0] * args[30].stencil->stride[0];
  base30 = base30 + (OPS_soa ? args[30].dat->type_size : args[30].dat->elem_size) *
    args[30].dat->size[0] *
    start[1] * args[30].stencil->stride[1];
  base30 = base30 + (OPS_soa ? args[30].dat->type_size : args[30].dat->elem_size) *
    args[30].dat->size[0] *
    args[30].dat->size[1] *
    start[2] * args[30].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a30 = (double *)((char *)args[30].data_d + base30);
  #else
  double *p_a30 = (double *)((char *)args[30].data + base30);
  #endif

  int base31 = args[31].dat->base_offset + (OPS_soa ? args[31].dat->type_size : args[31].dat->elem_size) * start[0] * args[31].stencil->stride[0];
  base31 = base31 + (OPS_soa ? args[31].dat->type_size : args[31].dat->elem_size) *
    args[31].dat->size[0] *
    start[1] * args[31].stencil->stride[1];
  base31 = base31 + (OPS_soa ? args[31].dat->type_size : args[31].dat->elem_size) *
    args[31].dat->size[0] *
    args[31].dat->size[1] *
    start[2] * args[31].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a31 = (double *)((char *)args[31].data_d + base31);
  #else
  double *p_a31 = (double *)((char *)args[31].data + base31);
  #endif

  int base32 = args[32].dat->base_offset + (OPS_soa ? args[32].dat->type_size : args[32].dat->elem_size) * start[0] * args[32].stencil->stride[0];
  base32 = base32 + (OPS_soa ? args[32].dat->type_size : args[32].dat->elem_size) *
    args[32].dat->size[0] *
    start[1] * args[32].stencil->stride[1];
  base32 = base32 + (OPS_soa ? args[32].dat->type_size : args[32].dat->elem_size) *
    args[32].dat->size[0] *
    args[32].dat->size[1] *
    start[2] * args[32].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a32 = (double *)((char *)args[32].data_d + base32);
  #else
  double *p_a32 = (double *)((char *)args[32].data + base32);
  #endif

  int base33 = args[33].dat->base_offset + (OPS_soa ? args[33].dat->type_size : args[33].dat->elem_size) * start[0] * args[33].stencil->stride[0];
  base33 = base33 + (OPS_soa ? args[33].dat->type_size : args[33].dat->elem_size) *
    args[33].dat->size[0] *
    start[1] * args[33].stencil->stride[1];
  base33 = base33 + (OPS_soa ? args[33].dat->type_size : args[33].dat->elem_size) *
    args[33].dat->size[0] *
    args[33].dat->size[1] *
    start[2] * args[33].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a33 = (double *)((char *)args[33].data_d + base33);
  #else
  double *p_a33 = (double *)((char *)args[33].data + base33);
  #endif

  int base34 = args[34].dat->base_offset + (OPS_soa ? args[34].dat->type_size : args[34].dat->elem_size) * start[0] * args[34].stencil->stride[0];
  base34 = base34 + (OPS_soa ? args[34].dat->type_size : args[34].dat->elem_size) *
    args[34].dat->size[0] *
    start[1] * args[34].stencil->stride[1];
  base34 = base34 + (OPS_soa ? args[34].dat->type_size : args[34].dat->elem_size) *
    args[34].dat->size[0] *
    args[34].dat->size[1] *
    start[2] * args[34].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a34 = (double *)((char *)args[34].data_d + base34);
  #else
  double *p_a34 = (double *)((char *)args[34].data + base34);
  #endif

  int base35 = args[35].dat->base_offset + (OPS_soa ? args[35].dat->type_size : args[35].dat->elem_size) * start[0] * args[35].stencil->stride[0];
  base35 = base35 + (OPS_soa ? args[35].dat->type_size : args[35].dat->elem_size) *
    args[35].dat->size[0] *
    start[1] * args[35].stencil->stride[1];
  base35 = base35 + (OPS_soa ? args[35].dat->type_size : args[35].dat->elem_size) *
    args[35].dat->size[0] *
    args[35].dat->size[1] *
    start[2] * args[35].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a35 = (double *)((char *)args[35].data_d + base35);
  #else
  double *p_a35 = (double *)((char *)args[35].data + base35);
  #endif

  int base36 = args[36].dat->base_offset + (OPS_soa ? args[36].dat->type_size : args[36].dat->elem_size) * start[0] * args[36].stencil->stride[0];
  base36 = base36 + (OPS_soa ? args[36].dat->type_size : args[36].dat->elem_size) *
    args[36].dat->size[0] *
    start[1] * args[36].stencil->stride[1];
  base36 = base36 + (OPS_soa ? args[36].dat->type_size : args[36].dat->elem_size) *
    args[36].dat->size[0] *
    args[36].dat->size[1] *
    start[2] * args[36].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a36 = (double *)((char *)args[36].data_d + base36);
  #else
  double *p_a36 = (double *)((char *)args[36].data + base36);
  #endif

  int base37 = args[37].dat->base_offset + (OPS_soa ? args[37].dat->type_size : args[37].dat->elem_size) * start[0] * args[37].stencil->stride[0];
  base37 = base37 + (OPS_soa ? args[37].dat->type_size : args[37].dat->elem_size) *
    args[37].dat->size[0] *
    start[1] * args[37].stencil->stride[1];
  base37 = base37 + (OPS_soa ? args[37].dat->type_size : args[37].dat->elem_size) *
    args[37].dat->size[0] *
    args[37].dat->size[1] *
    start[2] * args[37].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a37 = (double *)((char *)args[37].data_d + base37);
  #else
  double *p_a37 = (double *)((char *)args[37].data + base37);
  #endif

  int base38 = args[38].dat->base_offset + (OPS_soa ? args[38].dat->type_size : args[38].dat->elem_size) * start[0] * args[38].stencil->stride[0];
  base38 = base38 + (OPS_soa ? args[38].dat->type_size : args[38].dat->elem_size) *
    args[38].dat->size[0] *
    start[1] * args[38].stencil->stride[1];
  base38 = base38 + (OPS_soa ? args[38].dat->type_size : args[38].dat->elem_size) *
    args[38].dat->size[0] *
    args[38].dat->size[1] *
    start[2] * args[38].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a38 = (double *)((char *)args[38].data_d + base38);
  #else
  double *p_a38 = (double *)((char *)args[38].data + base38);
  #endif

  int base39 = args[39].dat->base_offset + (OPS_soa ? args[39].dat->type_size : args[39].dat->elem_size) * start[0] * args[39].stencil->stride[0];
  base39 = base39 + (OPS_soa ? args[39].dat->type_size : args[39].dat->elem_size) *
    args[39].dat->size[0] *
    start[1] * args[39].stencil->stride[1];
  base39 = base39 + (OPS_soa ? args[39].dat->type_size : args[39].dat->elem_size) *
    args[39].dat->size[0] *
    args[39].dat->size[1] *
    start[2] * args[39].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a39 = (double *)((char *)args[39].data_d + base39);
  #else
  double *p_a39 = (double *)((char *)args[39].data + base39);
  #endif

  int base40 = args[40].dat->base_offset + (OPS_soa ? args[40].dat->type_size : args[40].dat->elem_size) * start[0] * args[40].stencil->stride[0];
  base40 = base40 + (OPS_soa ? args[40].dat->type_size : args[40].dat->elem_size) *
    args[40].dat->size[0] *
    start[1] * args[40].stencil->stride[1];
  base40 = base40 + (OPS_soa ? args[40].dat->type_size : args[40].dat->elem_size) *
    args[40].dat->size[0] *
    args[40].dat->size[1] *
    start[2] * args[40].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a40 = (double *)((char *)args[40].data_d + base40);
  #else
  double *p_a40 = (double *)((char *)args[40].data + base40);
  #endif

  int base41 = args[41].dat->base_offset + (OPS_soa ? args[41].dat->type_size : args[41].dat->elem_size) * start[0] * args[41].stencil->stride[0];
  base41 = base41 + (OPS_soa ? args[41].dat->type_size : args[41].dat->elem_size) *
    args[41].dat->size[0] *
    start[1] * args[41].stencil->stride[1];
  base41 = base41 + (OPS_soa ? args[41].dat->type_size : args[41].dat->elem_size) *
    args[41].dat->size[0] *
    args[41].dat->size[1] *
    start[2] * args[41].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a41 = (double *)((char *)args[41].data_d + base41);
  #else
  double *p_a41 = (double *)((char *)args[41].data + base41);
  #endif

  int base42 = args[42].dat->base_offset + (OPS_soa ? args[42].dat->type_size : args[42].dat->elem_size) * start[0] * args[42].stencil->stride[0];
  base42 = base42 + (OPS_soa ? args[42].dat->type_size : args[42].dat->elem_size) *
    args[42].dat->size[0] *
    start[1] * args[42].stencil->stride[1];
  base42 = base42 + (OPS_soa ? args[42].dat->type_size : args[42].dat->elem_size) *
    args[42].dat->size[0] *
    args[42].dat->size[1] *
    start[2] * args[42].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a42 = (double *)((char *)args[42].data_d + base42);
  #else
  double *p_a42 = (double *)((char *)args[42].data + base42);
  #endif

  int base43 = args[43].dat->base_offset + (OPS_soa ? args[43].dat->type_size : args[43].dat->elem_size) * start[0] * args[43].stencil->stride[0];
  base43 = base43 + (OPS_soa ? args[43].dat->type_size : args[43].dat->elem_size) *
    args[43].dat->size[0] *
    start[1] * args[43].stencil->stride[1];
  base43 = base43 + (OPS_soa ? args[43].dat->type_size : args[43].dat->elem_size) *
    args[43].dat->size[0] *
    args[43].dat->size[1] *
    start[2] * args[43].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a43 = (double *)((char *)args[43].data_d + base43);
  #else
  double *p_a43 = (double *)((char *)args[43].data + base43);
  #endif

  int base44 = args[44].dat->base_offset + (OPS_soa ? args[44].dat->type_size : args[44].dat->elem_size) * start[0] * args[44].stencil->stride[0];
  base44 = base44 + (OPS_soa ? args[44].dat->type_size : args[44].dat->elem_size) *
    args[44].dat->size[0] *
    start[1] * args[44].stencil->stride[1];
  base44 = base44 + (OPS_soa ? args[44].dat->type_size : args[44].dat->elem_size) *
    args[44].dat->size[0] *
    args[44].dat->size[1] *
    start[2] * args[44].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a44 = (double *)((char *)args[44].data_d + base44);
  #else
  double *p_a44 = (double *)((char *)args[44].data + base44);
  #endif

  int base45 = args[45].dat->base_offset + (OPS_soa ? args[45].dat->type_size : args[45].dat->elem_size) * start[0] * args[45].stencil->stride[0];
  base45 = base45 + (OPS_soa ? args[45].dat->type_size : args[45].dat->elem_size) *
    args[45].dat->size[0] *
    start[1] * args[45].stencil->stride[1];
  base45 = base45 + (OPS_soa ? args[45].dat->type_size : args[45].dat->elem_size) *
    args[45].dat->size[0] *
    args[45].dat->size[1] *
    start[2] * args[45].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a45 = (double *)((char *)args[45].data_d + base45);
  #else
  double *p_a45 = (double *)((char *)args[45].data + base45);
  #endif

  int base46 = args[46].dat->base_offset + (OPS_soa ? args[46].dat->type_size : args[46].dat->elem_size) * start[0] * args[46].stencil->stride[0];
  base46 = base46 + (OPS_soa ? args[46].dat->type_size : args[46].dat->elem_size) *
    args[46].dat->size[0] *
    start[1] * args[46].stencil->stride[1];
  base46 = base46 + (OPS_soa ? args[46].dat->type_size : args[46].dat->elem_size) *
    args[46].dat->size[0] *
    args[46].dat->size[1] *
    start[2] * args[46].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a46 = (double *)((char *)args[46].data_d + base46);
  #else
  double *p_a46 = (double *)((char *)args[46].data + base46);
  #endif

  int base47 = args[47].dat->base_offset + (OPS_soa ? args[47].dat->type_size : args[47].dat->elem_size) * start[0] * args[47].stencil->stride[0];
  base47 = base47 + (OPS_soa ? args[47].dat->type_size : args[47].dat->elem_size) *
    args[47].dat->size[0] *
    start[1] * args[47].stencil->stride[1];
  base47 = base47 + (OPS_soa ? args[47].dat->type_size : args[47].dat->elem_size) *
    args[47].dat->size[0] *
    args[47].dat->size[1] *
    start[2] * args[47].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a47 = (double *)((char *)args[47].data_d + base47);
  #else
  double *p_a47 = (double *)((char *)args[47].data + base47);
  #endif

  int base48 = args[48].dat->base_offset + (OPS_soa ? args[48].dat->type_size : args[48].dat->elem_size) * start[0] * args[48].stencil->stride[0];
  base48 = base48 + (OPS_soa ? args[48].dat->type_size : args[48].dat->elem_size) *
    args[48].dat->size[0] *
    start[1] * args[48].stencil->stride[1];
  base48 = base48 + (OPS_soa ? args[48].dat->type_size : args[48].dat->elem_size) *
    args[48].dat->size[0] *
    args[48].dat->size[1] *
    start[2] * args[48].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a48 = (double *)((char *)args[48].data_d + base48);
  #else
  double *p_a48 = (double *)((char *)args[48].data + base48);
  #endif

  int base49 = args[49].dat->base_offset + (OPS_soa ? args[49].dat->type_size : args[49].dat->elem_size) * start[0] * args[49].stencil->stride[0];
  base49 = base49 + (OPS_soa ? args[49].dat->type_size : args[49].dat->elem_size) *
    args[49].dat->size[0] *
    start[1] * args[49].stencil->stride[1];
  base49 = base49 + (OPS_soa ? args[49].dat->type_size : args[49].dat->elem_size) *
    args[49].dat->size[0] *
    args[49].dat->size[1] *
    start[2] * args[49].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a49 = (double *)((char *)args[49].data_d + base49);
  #else
  double *p_a49 = (double *)((char *)args[49].data + base49);
  #endif

  int base50 = args[50].dat->base_offset + (OPS_soa ? args[50].dat->type_size : args[50].dat->elem_size) * start[0] * args[50].stencil->stride[0];
  base50 = base50 + (OPS_soa ? args[50].dat->type_size : args[50].dat->elem_size) *
    args[50].dat->size[0] *
    start[1] * args[50].stencil->stride[1];
  base50 = base50 + (OPS_soa ? args[50].dat->type_size : args[50].dat->elem_size) *
    args[50].dat->size[0] *
    args[50].dat->size[1] *
    start[2] * args[50].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a50 = (double *)((char *)args[50].data_d + base50);
  #else
  double *p_a50 = (double *)((char *)args[50].data + base50);
  #endif

  int base51 = args[51].dat->base_offset + (OPS_soa ? args[51].dat->type_size : args[51].dat->elem_size) * start[0] * args[51].stencil->stride[0];
  base51 = base51 + (OPS_soa ? args[51].dat->type_size : args[51].dat->elem_size) *
    args[51].dat->size[0] *
    start[1] * args[51].stencil->stride[1];
  base51 = base51 + (OPS_soa ? args[51].dat->type_size : args[51].dat->elem_size) *
    args[51].dat->size[0] *
    args[51].dat->size[1] *
    start[2] * args[51].stencil->stride[2];
  #ifdef OPS_GPU
  double *p_a51 = (double *)((char *)args[51].data_d + base51);
  #else
  double *p_a51 = (double *)((char *)args[51].data + base51);
  #endif


  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);

  //initialize global variable with the dimension of dats
  xdim0 = args[0].dat->size[0];
  ydim0 = args[0].dat->size[1];
  xdim1 = args[1].dat->size[0];
  ydim1 = args[1].dat->size[1];
  xdim2 = args[2].dat->size[0];
  ydim2 = args[2].dat->size[1];
  xdim3 = args[3].dat->size[0];
  ydim3 = args[3].dat->size[1];
  xdim4 = args[4].dat->size[0];
  ydim4 = args[4].dat->size[1];
  xdim5 = args[5].dat->size[0];
  ydim5 = args[5].dat->size[1];
  xdim6 = args[6].dat->size[0];
  ydim6 = args[6].dat->size[1];
  xdim7 = args[7].dat->size[0];
  ydim7 = args[7].dat->size[1];
  xdim8 = args[8].dat->size[0];
  ydim8 = args[8].dat->size[1];
  xdim9 = args[9].dat->size[0];
  ydim9 = args[9].dat->size[1];
  xdim10 = args[10].dat->size[0];
  ydim10 = args[10].dat->size[1];
  xdim11 = args[11].dat->size[0];
  ydim11 = args[11].dat->size[1];
  xdim12 = args[12].dat->size[0];
  ydim12 = args[12].dat->size[1];
  xdim13 = args[13].dat->size[0];
  ydim13 = args[13].dat->size[1];
  xdim14 = args[14].dat->size[0];
  ydim14 = args[14].dat->size[1];
  xdim15 = args[15].dat->size[0];
  ydim15 = args[15].dat->size[1];
  xdim16 = args[16].dat->size[0];
  ydim16 = args[16].dat->size[1];
  xdim17 = args[17].dat->size[0];
  ydim17 = args[17].dat->size[1];
  xdim18 = args[18].dat->size[0];
  ydim18 = args[18].dat->size[1];
  xdim19 = args[19].dat->size[0];
  ydim19 = args[19].dat->size[1];
  xdim20 = args[20].dat->size[0];
  ydim20 = args[20].dat->size[1];
  xdim21 = args[21].dat->size[0];
  ydim21 = args[21].dat->size[1];
  xdim22 = args[22].dat->size[0];
  ydim22 = args[22].dat->size[1];
  xdim23 = args[23].dat->size[0];
  ydim23 = args[23].dat->size[1];
  xdim24 = args[24].dat->size[0];
  ydim24 = args[24].dat->size[1];
  xdim25 = args[25].dat->size[0];
  ydim25 = args[25].dat->size[1];
  xdim26 = args[26].dat->size[0];
  ydim26 = args[26].dat->size[1];
  xdim27 = args[27].dat->size[0];
  ydim27 = args[27].dat->size[1];
  xdim28 = args[28].dat->size[0];
  ydim28 = args[28].dat->size[1];
  xdim29 = args[29].dat->size[0];
  ydim29 = args[29].dat->size[1];
  xdim30 = args[30].dat->size[0];
  ydim30 = args[30].dat->size[1];
  xdim31 = args[31].dat->size[0];
  ydim31 = args[31].dat->size[1];
  xdim32 = args[32].dat->size[0];
  ydim32 = args[32].dat->size[1];
  xdim33 = args[33].dat->size[0];
  ydim33 = args[33].dat->size[1];
  xdim34 = args[34].dat->size[0];
  ydim34 = args[34].dat->size[1];
  xdim35 = args[35].dat->size[0];
  ydim35 = args[35].dat->size[1];
  xdim36 = args[36].dat->size[0];
  ydim36 = args[36].dat->size[1];
  xdim37 = args[37].dat->size[0];
  ydim37 = args[37].dat->size[1];
  xdim38 = args[38].dat->size[0];
  ydim38 = args[38].dat->size[1];
  xdim39 = args[39].dat->size[0];
  ydim39 = args[39].dat->size[1];
  xdim40 = args[40].dat->size[0];
  ydim40 = args[40].dat->size[1];
  xdim41 = args[41].dat->size[0];
  ydim41 = args[41].dat->size[1];
  xdim42 = args[42].dat->size[0];
  ydim42 = args[42].dat->size[1];
  xdim43 = args[43].dat->size[0];
  ydim43 = args[43].dat->size[1];
  xdim44 = args[44].dat->size[0];
  ydim44 = args[44].dat->size[1];
  xdim45 = args[45].dat->size[0];
  ydim45 = args[45].dat->size[1];
  xdim46 = args[46].dat->size[0];
  ydim46 = args[46].dat->size[1];
  xdim47 = args[47].dat->size[0];
  ydim47 = args[47].dat->size[1];
  xdim48 = args[48].dat->size[0];
  ydim48 = args[48].dat->size[1];
  xdim49 = args[49].dat->size[0];
  ydim49 = args[49].dat->size[1];
  xdim50 = args[50].dat->size[0];
  ydim50 = args[50].dat->size[1];
  xdim51 = args[51].dat->size[0];
  ydim51 = args[51].dat->size[1];
  if (xdim0 != xdim0_opensbliblock00Kernel052_h || ydim0 != ydim0_opensbliblock00Kernel052_h || xdim1 != xdim1_opensbliblock00Kernel052_h || ydim1 != ydim1_opensbliblock00Kernel052_h || xdim2 != xdim2_opensbliblock00Kernel052_h || ydim2 != ydim2_opensbliblock00Kernel052_h || xdim3 != xdim3_opensbliblock00Kernel052_h || ydim3 != ydim3_opensbliblock00Kernel052_h || xdim4 != xdim4_opensbliblock00Kernel052_h || ydim4 != ydim4_opensbliblock00Kernel052_h || xdim5 != xdim5_opensbliblock00Kernel052_h || ydim5 != ydim5_opensbliblock00Kernel052_h || xdim6 != xdim6_opensbliblock00Kernel052_h || ydim6 != ydim6_opensbliblock00Kernel052_h || xdim7 != xdim7_opensbliblock00Kernel052_h || ydim7 != ydim7_opensbliblock00Kernel052_h || xdim8 != xdim8_opensbliblock00Kernel052_h || ydim8 != ydim8_opensbliblock00Kernel052_h || xdim9 != xdim9_opensbliblock00Kernel052_h || ydim9 != ydim9_opensbliblock00Kernel052_h || xdim10 != xdim10_opensbliblock00Kernel052_h || ydim10 != ydim10_opensbliblock00Kernel052_h || xdim11 != xdim11_opensbliblock00Kernel052_h || ydim11 != ydim11_opensbliblock00Kernel052_h || xdim12 != xdim12_opensbliblock00Kernel052_h || ydim12 != ydim12_opensbliblock00Kernel052_h || xdim13 != xdim13_opensbliblock00Kernel052_h || ydim13 != ydim13_opensbliblock00Kernel052_h || xdim14 != xdim14_opensbliblock00Kernel052_h || ydim14 != ydim14_opensbliblock00Kernel052_h || xdim15 != xdim15_opensbliblock00Kernel052_h || ydim15 != ydim15_opensbliblock00Kernel052_h || xdim16 != xdim16_opensbliblock00Kernel052_h || ydim16 != ydim16_opensbliblock00Kernel052_h || xdim17 != xdim17_opensbliblock00Kernel052_h || ydim17 != ydim17_opensbliblock00Kernel052_h || xdim18 != xdim18_opensbliblock00Kernel052_h || ydim18 != ydim18_opensbliblock00Kernel052_h || xdim19 != xdim19_opensbliblock00Kernel052_h || ydim19 != ydim19_opensbliblock00Kernel052_h || xdim20 != xdim20_opensbliblock00Kernel052_h || ydim20 != ydim20_opensbliblock00Kernel052_h || xdim21 != xdim21_opensbliblock00Kernel052_h || ydim21 != ydim21_opensbliblock00Kernel052_h || xdim22 != xdim22_opensbliblock00Kernel052_h || ydim22 != ydim22_opensbliblock00Kernel052_h || xdim23 != xdim23_opensbliblock00Kernel052_h || ydim23 != ydim23_opensbliblock00Kernel052_h || xdim24 != xdim24_opensbliblock00Kernel052_h || ydim24 != ydim24_opensbliblock00Kernel052_h || xdim25 != xdim25_opensbliblock00Kernel052_h || ydim25 != ydim25_opensbliblock00Kernel052_h || xdim26 != xdim26_opensbliblock00Kernel052_h || ydim26 != ydim26_opensbliblock00Kernel052_h || xdim27 != xdim27_opensbliblock00Kernel052_h || ydim27 != ydim27_opensbliblock00Kernel052_h || xdim28 != xdim28_opensbliblock00Kernel052_h || ydim28 != ydim28_opensbliblock00Kernel052_h || xdim29 != xdim29_opensbliblock00Kernel052_h || ydim29 != ydim29_opensbliblock00Kernel052_h || xdim30 != xdim30_opensbliblock00Kernel052_h || ydim30 != ydim30_opensbliblock00Kernel052_h || xdim31 != xdim31_opensbliblock00Kernel052_h || ydim31 != ydim31_opensbliblock00Kernel052_h || xdim32 != xdim32_opensbliblock00Kernel052_h || ydim32 != ydim32_opensbliblock00Kernel052_h || xdim33 != xdim33_opensbliblock00Kernel052_h || ydim33 != ydim33_opensbliblock00Kernel052_h || xdim34 != xdim34_opensbliblock00Kernel052_h || ydim34 != ydim34_opensbliblock00Kernel052_h || xdim35 != xdim35_opensbliblock00Kernel052_h || ydim35 != ydim35_opensbliblock00Kernel052_h || xdim36 != xdim36_opensbliblock00Kernel052_h || ydim36 != ydim36_opensbliblock00Kernel052_h || xdim37 != xdim37_opensbliblock00Kernel052_h || ydim37 != ydim37_opensbliblock00Kernel052_h || xdim38 != xdim38_opensbliblock00Kernel052_h || ydim38 != ydim38_opensbliblock00Kernel052_h || xdim39 != xdim39_opensbliblock00Kernel052_h || ydim39 != ydim39_opensbliblock00Kernel052_h || xdim40 != xdim40_opensbliblock00Kernel052_h || ydim40 != ydim40_opensbliblock00Kernel052_h || xdim41 != xdim41_opensbliblock00Kernel052_h || ydim41 != ydim41_opensbliblock00Kernel052_h || xdim42 != xdim42_opensbliblock00Kernel052_h || ydim42 != ydim42_opensbliblock00Kernel052_h || xdim43 != xdim43_opensbliblock00Kernel052_h || ydim43 != ydim43_opensbliblock00Kernel052_h || xdim44 != xdim44_opensbliblock00Kernel052_h || ydim44 != ydim44_opensbliblock00Kernel052_h || xdim45 != xdim45_opensbliblock00Kernel052_h || ydim45 != ydim45_opensbliblock00Kernel052_h || xdim46 != xdim46_opensbliblock00Kernel052_h || ydim46 != ydim46_opensbliblock00Kernel052_h || xdim47 != xdim47_opensbliblock00Kernel052_h || ydim47 != ydim47_opensbliblock00Kernel052_h || xdim48 != xdim48_opensbliblock00Kernel052_h || ydim48 != ydim48_opensbliblock00Kernel052_h || xdim49 != xdim49_opensbliblock00Kernel052_h || ydim49 != ydim49_opensbliblock00Kernel052_h || xdim50 != xdim50_opensbliblock00Kernel052_h || ydim50 != ydim50_opensbliblock00Kernel052_h || xdim51 != xdim51_opensbliblock00Kernel052_h || ydim51 != ydim51_opensbliblock00Kernel052_h) {
    xdim0_opensbliblock00Kernel052 = xdim0;
    xdim0_opensbliblock00Kernel052_h = xdim0;
    ydim0_opensbliblock00Kernel052 = ydim0;
    ydim0_opensbliblock00Kernel052_h = ydim0;
    xdim1_opensbliblock00Kernel052 = xdim1;
    xdim1_opensbliblock00Kernel052_h = xdim1;
    ydim1_opensbliblock00Kernel052 = ydim1;
    ydim1_opensbliblock00Kernel052_h = ydim1;
    xdim2_opensbliblock00Kernel052 = xdim2;
    xdim2_opensbliblock00Kernel052_h = xdim2;
    ydim2_opensbliblock00Kernel052 = ydim2;
    ydim2_opensbliblock00Kernel052_h = ydim2;
    xdim3_opensbliblock00Kernel052 = xdim3;
    xdim3_opensbliblock00Kernel052_h = xdim3;
    ydim3_opensbliblock00Kernel052 = ydim3;
    ydim3_opensbliblock00Kernel052_h = ydim3;
    xdim4_opensbliblock00Kernel052 = xdim4;
    xdim4_opensbliblock00Kernel052_h = xdim4;
    ydim4_opensbliblock00Kernel052 = ydim4;
    ydim4_opensbliblock00Kernel052_h = ydim4;
    xdim5_opensbliblock00Kernel052 = xdim5;
    xdim5_opensbliblock00Kernel052_h = xdim5;
    ydim5_opensbliblock00Kernel052 = ydim5;
    ydim5_opensbliblock00Kernel052_h = ydim5;
    xdim6_opensbliblock00Kernel052 = xdim6;
    xdim6_opensbliblock00Kernel052_h = xdim6;
    ydim6_opensbliblock00Kernel052 = ydim6;
    ydim6_opensbliblock00Kernel052_h = ydim6;
    xdim7_opensbliblock00Kernel052 = xdim7;
    xdim7_opensbliblock00Kernel052_h = xdim7;
    ydim7_opensbliblock00Kernel052 = ydim7;
    ydim7_opensbliblock00Kernel052_h = ydim7;
    xdim8_opensbliblock00Kernel052 = xdim8;
    xdim8_opensbliblock00Kernel052_h = xdim8;
    ydim8_opensbliblock00Kernel052 = ydim8;
    ydim8_opensbliblock00Kernel052_h = ydim8;
    xdim9_opensbliblock00Kernel052 = xdim9;
    xdim9_opensbliblock00Kernel052_h = xdim9;
    ydim9_opensbliblock00Kernel052 = ydim9;
    ydim9_opensbliblock00Kernel052_h = ydim9;
    xdim10_opensbliblock00Kernel052 = xdim10;
    xdim10_opensbliblock00Kernel052_h = xdim10;
    ydim10_opensbliblock00Kernel052 = ydim10;
    ydim10_opensbliblock00Kernel052_h = ydim10;
    xdim11_opensbliblock00Kernel052 = xdim11;
    xdim11_opensbliblock00Kernel052_h = xdim11;
    ydim11_opensbliblock00Kernel052 = ydim11;
    ydim11_opensbliblock00Kernel052_h = ydim11;
    xdim12_opensbliblock00Kernel052 = xdim12;
    xdim12_opensbliblock00Kernel052_h = xdim12;
    ydim12_opensbliblock00Kernel052 = ydim12;
    ydim12_opensbliblock00Kernel052_h = ydim12;
    xdim13_opensbliblock00Kernel052 = xdim13;
    xdim13_opensbliblock00Kernel052_h = xdim13;
    ydim13_opensbliblock00Kernel052 = ydim13;
    ydim13_opensbliblock00Kernel052_h = ydim13;
    xdim14_opensbliblock00Kernel052 = xdim14;
    xdim14_opensbliblock00Kernel052_h = xdim14;
    ydim14_opensbliblock00Kernel052 = ydim14;
    ydim14_opensbliblock00Kernel052_h = ydim14;
    xdim15_opensbliblock00Kernel052 = xdim15;
    xdim15_opensbliblock00Kernel052_h = xdim15;
    ydim15_opensbliblock00Kernel052 = ydim15;
    ydim15_opensbliblock00Kernel052_h = ydim15;
    xdim16_opensbliblock00Kernel052 = xdim16;
    xdim16_opensbliblock00Kernel052_h = xdim16;
    ydim16_opensbliblock00Kernel052 = ydim16;
    ydim16_opensbliblock00Kernel052_h = ydim16;
    xdim17_opensbliblock00Kernel052 = xdim17;
    xdim17_opensbliblock00Kernel052_h = xdim17;
    ydim17_opensbliblock00Kernel052 = ydim17;
    ydim17_opensbliblock00Kernel052_h = ydim17;
    xdim18_opensbliblock00Kernel052 = xdim18;
    xdim18_opensbliblock00Kernel052_h = xdim18;
    ydim18_opensbliblock00Kernel052 = ydim18;
    ydim18_opensbliblock00Kernel052_h = ydim18;
    xdim19_opensbliblock00Kernel052 = xdim19;
    xdim19_opensbliblock00Kernel052_h = xdim19;
    ydim19_opensbliblock00Kernel052 = ydim19;
    ydim19_opensbliblock00Kernel052_h = ydim19;
    xdim20_opensbliblock00Kernel052 = xdim20;
    xdim20_opensbliblock00Kernel052_h = xdim20;
    ydim20_opensbliblock00Kernel052 = ydim20;
    ydim20_opensbliblock00Kernel052_h = ydim20;
    xdim21_opensbliblock00Kernel052 = xdim21;
    xdim21_opensbliblock00Kernel052_h = xdim21;
    ydim21_opensbliblock00Kernel052 = ydim21;
    ydim21_opensbliblock00Kernel052_h = ydim21;
    xdim22_opensbliblock00Kernel052 = xdim22;
    xdim22_opensbliblock00Kernel052_h = xdim22;
    ydim22_opensbliblock00Kernel052 = ydim22;
    ydim22_opensbliblock00Kernel052_h = ydim22;
    xdim23_opensbliblock00Kernel052 = xdim23;
    xdim23_opensbliblock00Kernel052_h = xdim23;
    ydim23_opensbliblock00Kernel052 = ydim23;
    ydim23_opensbliblock00Kernel052_h = ydim23;
    xdim24_opensbliblock00Kernel052 = xdim24;
    xdim24_opensbliblock00Kernel052_h = xdim24;
    ydim24_opensbliblock00Kernel052 = ydim24;
    ydim24_opensbliblock00Kernel052_h = ydim24;
    xdim25_opensbliblock00Kernel052 = xdim25;
    xdim25_opensbliblock00Kernel052_h = xdim25;
    ydim25_opensbliblock00Kernel052 = ydim25;
    ydim25_opensbliblock00Kernel052_h = ydim25;
    xdim26_opensbliblock00Kernel052 = xdim26;
    xdim26_opensbliblock00Kernel052_h = xdim26;
    ydim26_opensbliblock00Kernel052 = ydim26;
    ydim26_opensbliblock00Kernel052_h = ydim26;
    xdim27_opensbliblock00Kernel052 = xdim27;
    xdim27_opensbliblock00Kernel052_h = xdim27;
    ydim27_opensbliblock00Kernel052 = ydim27;
    ydim27_opensbliblock00Kernel052_h = ydim27;
    xdim28_opensbliblock00Kernel052 = xdim28;
    xdim28_opensbliblock00Kernel052_h = xdim28;
    ydim28_opensbliblock00Kernel052 = ydim28;
    ydim28_opensbliblock00Kernel052_h = ydim28;
    xdim29_opensbliblock00Kernel052 = xdim29;
    xdim29_opensbliblock00Kernel052_h = xdim29;
    ydim29_opensbliblock00Kernel052 = ydim29;
    ydim29_opensbliblock00Kernel052_h = ydim29;
    xdim30_opensbliblock00Kernel052 = xdim30;
    xdim30_opensbliblock00Kernel052_h = xdim30;
    ydim30_opensbliblock00Kernel052 = ydim30;
    ydim30_opensbliblock00Kernel052_h = ydim30;
    xdim31_opensbliblock00Kernel052 = xdim31;
    xdim31_opensbliblock00Kernel052_h = xdim31;
    ydim31_opensbliblock00Kernel052 = ydim31;
    ydim31_opensbliblock00Kernel052_h = ydim31;
    xdim32_opensbliblock00Kernel052 = xdim32;
    xdim32_opensbliblock00Kernel052_h = xdim32;
    ydim32_opensbliblock00Kernel052 = ydim32;
    ydim32_opensbliblock00Kernel052_h = ydim32;
    xdim33_opensbliblock00Kernel052 = xdim33;
    xdim33_opensbliblock00Kernel052_h = xdim33;
    ydim33_opensbliblock00Kernel052 = ydim33;
    ydim33_opensbliblock00Kernel052_h = ydim33;
    xdim34_opensbliblock00Kernel052 = xdim34;
    xdim34_opensbliblock00Kernel052_h = xdim34;
    ydim34_opensbliblock00Kernel052 = ydim34;
    ydim34_opensbliblock00Kernel052_h = ydim34;
    xdim35_opensbliblock00Kernel052 = xdim35;
    xdim35_opensbliblock00Kernel052_h = xdim35;
    ydim35_opensbliblock00Kernel052 = ydim35;
    ydim35_opensbliblock00Kernel052_h = ydim35;
    xdim36_opensbliblock00Kernel052 = xdim36;
    xdim36_opensbliblock00Kernel052_h = xdim36;
    ydim36_opensbliblock00Kernel052 = ydim36;
    ydim36_opensbliblock00Kernel052_h = ydim36;
    xdim37_opensbliblock00Kernel052 = xdim37;
    xdim37_opensbliblock00Kernel052_h = xdim37;
    ydim37_opensbliblock00Kernel052 = ydim37;
    ydim37_opensbliblock00Kernel052_h = ydim37;
    xdim38_opensbliblock00Kernel052 = xdim38;
    xdim38_opensbliblock00Kernel052_h = xdim38;
    ydim38_opensbliblock00Kernel052 = ydim38;
    ydim38_opensbliblock00Kernel052_h = ydim38;
    xdim39_opensbliblock00Kernel052 = xdim39;
    xdim39_opensbliblock00Kernel052_h = xdim39;
    ydim39_opensbliblock00Kernel052 = ydim39;
    ydim39_opensbliblock00Kernel052_h = ydim39;
    xdim40_opensbliblock00Kernel052 = xdim40;
    xdim40_opensbliblock00Kernel052_h = xdim40;
    ydim40_opensbliblock00Kernel052 = ydim40;
    ydim40_opensbliblock00Kernel052_h = ydim40;
    xdim41_opensbliblock00Kernel052 = xdim41;
    xdim41_opensbliblock00Kernel052_h = xdim41;
    ydim41_opensbliblock00Kernel052 = ydim41;
    ydim41_opensbliblock00Kernel052_h = ydim41;
    xdim42_opensbliblock00Kernel052 = xdim42;
    xdim42_opensbliblock00Kernel052_h = xdim42;
    ydim42_opensbliblock00Kernel052 = ydim42;
    ydim42_opensbliblock00Kernel052_h = ydim42;
    xdim43_opensbliblock00Kernel052 = xdim43;
    xdim43_opensbliblock00Kernel052_h = xdim43;
    ydim43_opensbliblock00Kernel052 = ydim43;
    ydim43_opensbliblock00Kernel052_h = ydim43;
    xdim44_opensbliblock00Kernel052 = xdim44;
    xdim44_opensbliblock00Kernel052_h = xdim44;
    ydim44_opensbliblock00Kernel052 = ydim44;
    ydim44_opensbliblock00Kernel052_h = ydim44;
    xdim45_opensbliblock00Kernel052 = xdim45;
    xdim45_opensbliblock00Kernel052_h = xdim45;
    ydim45_opensbliblock00Kernel052 = ydim45;
    ydim45_opensbliblock00Kernel052_h = ydim45;
    xdim46_opensbliblock00Kernel052 = xdim46;
    xdim46_opensbliblock00Kernel052_h = xdim46;
    ydim46_opensbliblock00Kernel052 = ydim46;
    ydim46_opensbliblock00Kernel052_h = ydim46;
    xdim47_opensbliblock00Kernel052 = xdim47;
    xdim47_opensbliblock00Kernel052_h = xdim47;
    ydim47_opensbliblock00Kernel052 = ydim47;
    ydim47_opensbliblock00Kernel052_h = ydim47;
    xdim48_opensbliblock00Kernel052 = xdim48;
    xdim48_opensbliblock00Kernel052_h = xdim48;
    ydim48_opensbliblock00Kernel052 = ydim48;
    ydim48_opensbliblock00Kernel052_h = ydim48;
    xdim49_opensbliblock00Kernel052 = xdim49;
    xdim49_opensbliblock00Kernel052_h = xdim49;
    ydim49_opensbliblock00Kernel052 = ydim49;
    ydim49_opensbliblock00Kernel052_h = ydim49;
    xdim50_opensbliblock00Kernel052 = xdim50;
    xdim50_opensbliblock00Kernel052_h = xdim50;
    ydim50_opensbliblock00Kernel052 = ydim50;
    ydim50_opensbliblock00Kernel052_h = ydim50;
    xdim51_opensbliblock00Kernel052 = xdim51;
    xdim51_opensbliblock00Kernel052_h = xdim51;
    ydim51_opensbliblock00Kernel052 = ydim51;
    ydim51_opensbliblock00Kernel052_h = ydim51;
  }

  //Halo Exchanges

  #ifdef OPS_GPU
  ops_H_D_exchanges_device(args, 52);
  #else
  ops_H_D_exchanges_host(args, 52);
  #endif
  ops_halo_exchanges(args,52,range);

  #ifdef OPS_GPU
  ops_H_D_exchanges_device(args, 52);
  #else
  ops_H_D_exchanges_host(args, 52);
  #endif
  if (OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    OPS_kernels[56].mpi_time += t2-t1;
  }

  opensbliblock00Kernel052_c_wrapper(
    p_a0,
    p_a1,
    p_a2,
    p_a3,
    p_a4,
    p_a5,
    p_a6,
    p_a7,
    p_a8,
    p_a9,
    p_a10,
    p_a11,
    p_a12,
    p_a13,
    p_a14,
    p_a15,
    p_a16,
    p_a17,
    p_a18,
    p_a19,
    p_a20,
    p_a21,
    p_a22,
    p_a23,
    p_a24,
    p_a25,
    p_a26,
    p_a27,
    p_a28,
    p_a29,
    p_a30,
    p_a31,
    p_a32,
    p_a33,
    p_a34,
    p_a35,
    p_a36,
    p_a37,
    p_a38,
    p_a39,
    p_a40,
    p_a41,
    p_a42,
    p_a43,
    p_a44,
    p_a45,
    p_a46,
    p_a47,
    p_a48,
    p_a49,
    p_a50,
    p_a51,
    x_size, y_size, z_size);

  if (OPS_diags > 1) {
    ops_timers_core(&c1,&t1);
    OPS_kernels[56].time += t1-t2;
  }
  #ifdef OPS_GPU
  ops_set_dirtybit_device(args, 52);
  #else
  ops_set_dirtybit_host(args, 52);
  #endif
  ops_set_halo_dirtybit3(&args[47],range);
  ops_set_halo_dirtybit3(&args[48],range);
  ops_set_halo_dirtybit3(&args[49],range);
  ops_set_halo_dirtybit3(&args[50],range);
  ops_set_halo_dirtybit3(&args[51],range);

  if (OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    OPS_kernels[56].mpi_time += t2-t1;
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg0);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg1);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg2);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg3);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg4);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg5);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg6);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg7);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg8);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg9);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg10);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg11);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg12);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg13);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg14);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg15);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg16);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg17);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg18);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg19);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg20);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg21);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg22);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg23);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg24);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg25);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg26);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg27);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg28);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg29);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg30);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg31);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg32);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg33);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg34);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg35);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg36);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg37);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg38);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg39);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg40);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg41);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg42);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg43);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg44);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg45);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg46);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg47);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg48);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg49);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg50);
    OPS_kernels[56].transfer += ops_compute_transfer(dim, start, end, &arg51);
  }
}
